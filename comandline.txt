This is my ComandLine Notes doc
every thing bellow is what I have learned/done with a date attached and where I did it.

7/7/23

Environment Variables
  Environment variables are variables that can be
  used across commands and programs and hold information about the environment.

  here is an example -> export USER="Jane Doe"
    this sets the environment variable USER to a name “Jane Doe”.
    The line export makes the variable to be available to all child sessions initiated from the session you are in.
    This is a way to make the variable persist across programs.

  $
   this sign is used to retrive a variables value for Example -> echo $USER


alias
  Example -> alias hy="history"
    the history command out puts the history of the commands used.
  Example -> alias ll="ls -la"
    this command outputs all contents and directories in long format, including all hidden files.


7/4/23
Happy 4th of July!

7/3/23


alias 
  this command allows you to create keyboard shortcuts, or aliases, for commonly used commands in nano
  here is an example -> alias pd="pwd"



Customization with .bash_profile
 
 
  A bash profile is a file used to store environment settings for your terminal. 
  On most computer systems, the file is in the home directory and is accessible by the name .bash_profile.
  When a session starts, it loads the contents of the bash profile before executing commands.
  . indicates a hidden file.
  The name .bash_profile is important since this is how the command line recognizes the bash profile.

  to change a profile use nano .bash_profile
  then make changes though the nano text editor
  then use source .bash_profile to activate the changes made in .bash_profile for the current session 

nano text editor
  how to start it example -> nano hello.txt
    you can write text and then save it with Control + O
  Ctrl + X exits the nano program. X stands for exit.
  Ctrl + G opens a help menu.



7/2/23

completed a Codecademy reveiw project.


7/1/23

sed 
  stands for “stream editor.
  similar to “find and replace.”
    s: stands for “substitution.” It is always used when using sed for substitution.
    first word: the search string, or the text to find.
    second word: the replacement string, or the text to add in place.
    g expression, meaning “global.
    In order to rewrite the actual file, we need to use -i at the beginning of the command:
    (it only changes the output if you don't use -i)

grep
  stands for “global regular expression print.”
  It searches files for lines that match a pattern and
  then returns the results
  -i enables the command to be case insensitive. 

  -R searches all files in a directory and outputs filenames and lines containing matched results.
  -R stands for “recursive”. 

  grep -Rl searches all files in a directory and outputs only filenames with matched results (so no lines). 
  l (a lowercase L, not a capital i) stands for “files with matches.” 

uniq
  stands for “unique.” It filters out adjacent, duplicate lines in a file.

sort
   takes the standard input and orders it alphabetically for the standard output 

wc 
   outputs the number of lines, words, and characters 

|
   a “pipe.” The | takes the standard output of
   the command on the left, and pipes it as standard
   input to the command on the right.

<
  takes the standard input from the file on the right and inputs it into the command on the left.


6/15/23
>> 
  takes the standard output of the command on the left and appends (adds) it to the file on the right.


>
  The > command redirects the standard output to a file.
  this command does overwrite the original file.

input/output/error

  standard input, abbreviated as stdin, is information inputted into the terminal through the keyboard or input device.

  standard output, abbreviated as stdout, is the information outputted after a process is run.

  standard error, abbreviated as stderr, is an error message outputted by a failed process.


echo
  The echo command accepts the string “Hello” as standard input, and echoes the string “Hello”
  back to the terminal as standard output.



x*
  the * is a wild card that can be used to denote all files begining with a 
  letter or phrase.
  such as: f*.txt

5/30/23
rm
  The rm command deletes files and directories.
  The -r (recursive) option is used to delete a directory and all of its child directories.
  deletes files and directories permanently!!!!!


mv 
  moves files without creating copies

5/2/23
cp -the copy command
  (cp name of file / new file name)
  if you want to copy into a new directory list the old directory
  and the old dile anthe the new name and new directory.
  copy multiple files by stateing their directory and name and what directory you want te=hem to go to.
  cp * my_directory/ copys an entire directory.
  


4/15/23
ls -alt lists all contents, including hidden files
  and directories, in long format, ordered by the
  date and time they were last modified.

cat 
  outputs the contents of a specified file.
  l command for peeking at files without opening them, and confirming the result of other commands that change the contents of files.
  
3/16/23
ls modefiers:
   ls -a = shows all lists all contents, including hidden files and directories
   ls -l = (a lowercase “L”) lists all contents of a directory in long format, as well as the file permissions
   ls -t =  orders files and directories by the time they were last modified.

3/14/23
did command line work on Codecademy.

3/13/23
learned how to cd into an agacent directory
  ex: one/apple
     cd ../pinaepple
     one/pinaepple
mkdir = make new directory
   just type mkdir (Name you would like to make your new directory. )
touch = make new file
   type touch and then the name you want

3/12/23
ls = list
   ls shows the lists of directories
pwd = print working directory
   it prints the name of your current directory.
cd = change directory
   cd changes your directory to a nested directory inside your current one
   cd .. allows you to move back a directory.